
test_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ca  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000187  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000105  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000016f  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000175  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000004f  00000000  00000000  00000725  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000
#include <util/delay.h>

int main(void)
{
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  70:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  72:	84 bb       	out	0x14, r24	; 20
    while(1)
    {
		int8_t row = 0b01111111;
		int8_t i;
		
		for(i=0;i<8;i++)
  74:	40 e0       	ldi	r20, 0x00	; 0
		{
			int8_t temp = row>>(i);
			
			PORTB = 0xFF;
  76:	5f ef       	ldi	r21, 0xFF	; 255
		int8_t row = 0b01111111;
		int8_t i;
		
		for(i=0;i<8;i++)
		{
			int8_t temp = row>>(i);
  78:	2f e7       	ldi	r18, 0x7F	; 127
  7a:	30 e0       	ldi	r19, 0x00	; 0
    while(1)
    {
		int8_t row = 0b01111111;
		int8_t i;
		
		for(i=0;i<8;i++)
  7c:	60 e0       	ldi	r22, 0x00	; 0
		{
			int8_t temp = row>>(i);
			
			PORTB = 0xFF;
  7e:	58 bb       	out	0x18, r21	; 24
		int8_t row = 0b01111111;
		int8_t i;
		
		for(i=0;i<8;i++)
		{
			int8_t temp = row>>(i);
  80:	c9 01       	movw	r24, r18
  82:	04 2e       	mov	r0, r20
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	95 95       	asr	r25
  88:	87 95       	ror	r24
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
			
			PORTB = 0xFF;
			PORTC = temp;
  8e:	85 bb       	out	0x15, r24	; 21
			PORTA = 0xFF;
  90:	5b bb       	out	0x1b, r21	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	7f e3       	ldi	r23, 0x3F	; 63
  94:	ed e0       	ldi	r30, 0x0D	; 13
  96:	f3 e0       	ldi	r31, 0x03	; 3
  98:	71 50       	subi	r23, 0x01	; 1
  9a:	e0 40       	sbci	r30, 0x00	; 0
  9c:	f0 40       	sbci	r31, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
			
			_delay_ms(1000);
			
			PORTC = 0xFF;
  a4:	55 bb       	out	0x15, r21	; 21
			PORTB = temp;
  a6:	88 bb       	out	0x18, r24	; 24
			PORTA = 0xFF;
  a8:	5b bb       	out	0x1b, r21	; 27
  aa:	7f e3       	ldi	r23, 0x3F	; 63
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	71 50       	subi	r23, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
    while(1)
    {
		int8_t row = 0b01111111;
		int8_t i;
		
		for(i=0;i<8;i++)
  bc:	4f 5f       	subi	r20, 0xFF	; 255
  be:	48 30       	cpi	r20, 0x08	; 8
  c0:	f4 f2       	brlt	.-68     	; 0x7e <main+0x12>
  c2:	46 2f       	mov	r20, r22
  c4:	dc cf       	rjmp	.-72     	; 0x7e <main+0x12>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>


flag.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b7  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012e  00000000  00000000  0000037b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000016e  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000086  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	0x3C , 0x3C , 0x24 , 0x24 , 0x24 , 0x24 , 0x3c , 0x3c
};

int main(void)
{
	DDRA = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  86:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  88:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  8a:	81 bb       	out	0x11, r24	; 17
	
    while(1)
    {
		int8_t i;
		
		for(i=0;i<8;i++)
  8c:	60 e0       	ldi	r22, 0x00	; 0
		{
			int8_t temp = ~(1<<i);
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	50 e0       	ldi	r21, 0x00	; 0
			
			PORTD = temp;
			PORTB = 0xFF;
  92:	7f ef       	ldi	r23, 0xFF	; 255
	
    while(1)
    {
		int8_t i;
		
		for(i=0;i<8;i++)
  94:	a0 e0       	ldi	r26, 0x00	; 0
		{
			int8_t temp = ~(1<<i);
  96:	86 2f       	mov	r24, r22
  98:	99 27       	eor	r25, r25
  9a:	87 fd       	sbrc	r24, 7
  9c:	90 95       	com	r25
  9e:	9a 01       	movw	r18, r20
  a0:	06 2e       	mov	r0, r22
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x26>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <main+0x22>
  ac:	20 95       	com	r18
			
			PORTD = temp;
  ae:	22 bb       	out	0x12, r18	; 18
			PORTB = 0xFF;
  b0:	78 bb       	out	0x18, r23	; 24
			PORTA = red[i];
  b2:	fc 01       	movw	r30, r24
  b4:	e8 59       	subi	r30, 0x98	; 152
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	30 81       	ld	r19, Z
  ba:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	e9 ef       	ldi	r30, 0xF9	; 249
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x3e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x44>
  c6:	00 00       	nop
			_delay_ms(1);
			
			PORTB = temp;
  c8:	28 bb       	out	0x18, r18	; 24
			PORTD = 0xFF;
  ca:	72 bb       	out	0x12, r23	; 18
			PORTA = green[i];
  cc:	fc 01       	movw	r30, r24
  ce:	e0 5a       	subi	r30, 0xA0	; 160
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	80 81       	ld	r24, Z
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x5e>
  e0:	00 00       	nop
	
    while(1)
    {
		int8_t i;
		
		for(i=0;i<8;i++)
  e2:	6f 5f       	subi	r22, 0xFF	; 255
  e4:	68 30       	cpi	r22, 0x08	; 8
  e6:	bc f2       	brlt	.-82     	; 0x96 <main+0x14>
  e8:	6a 2f       	mov	r22, r26
  ea:	d5 cf       	rjmp	.-86     	; 0x96 <main+0x14>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

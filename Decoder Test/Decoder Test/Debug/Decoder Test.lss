
Decoder Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000178  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001db  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000120  00000000  00000000  0000045f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000165  00000000  00000000  0000057f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001be  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009a  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	cc 54       	subi	r28, 0x4C	; 76
  8c:	d1 09       	sbc	r29, r1
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
  9c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  9e:	87 bb       	out	0x17, r24	; 23
	/**
	*PORTD = X(I2-)(I1-)(I0-) (DECODER4-)(DECODER3-)(DECODER2-)(DECODER1-)
	*/
	
	int8_t decoder[4] = {0b00001110,0b00001101,0b00001011,0b00000111};
  a0:	8e e0       	ldi	r24, 0x0E	; 14
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	8d e0       	ldi	r24, 0x0D	; 13
  a6:	8a 83       	std	Y+2, r24	; 0x02
  a8:	8b e0       	ldi	r24, 0x0B	; 11
  aa:	8b 83       	std	Y+3, r24	; 0x03
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	8c 83       	std	Y+4, r24	; 0x04
	int8_t dec_input[8]={0b00000000,0b00010000,0b00100000,0b00110000,0b01000000,0b01010000,0b01100000,0b01110000};
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	de 01       	movw	r26, r28
  b8:	15 96       	adiw	r26, 0x05	; 5
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x38>
    
	/*
		FIRST 16 FOR COLOR RED, NEXT 16 FOR COLOR YELLOW
	*/
	
	int8_t upper_pattern[32]={0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x84,0x84,0x84,0x84,0x00,0x84,0x84,0x84,0x84,0x00,0x84,0x84,0x84,0x84,0x00};
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	e8 e6       	ldi	r30, 0x68	; 104
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	de 01       	movw	r26, r28
  ca:	1d 96       	adiw	r26, 0x0d	; 13
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	8a 95       	dec	r24
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4a>
	int8_t lower_pattern[32]={0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x21,0x21,0x21,0x21,0x00,0x21,0x21,0x21,0x21,0x00,0x21,0x21,0x21,0x21,0x00};
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	e8 e8       	ldi	r30, 0x88	; 136
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	de 01       	movw	r26, r28
  dc:	9d 96       	adiw	r26, 0x2d	; 45
  de:	01 90       	ld	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	8a 95       	dec	r24
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x5c>
		
		/*
			FIRST 2 FOR COLOR RED, SECOND 2 FOR COLOR YELLOW
		*/
		
		for(i=0;i<4;i++)
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	9e 01       	movw	r18, r28
  ea:	23 5f       	subi	r18, 0xF3	; 243
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
			int8_t dec = decoder[i];
			
			for(j=0;j<8;j++)
			{
				int8_t col = dec_input[j];
				int8_t temp = dec || col;
  ee:	01 e0       	ldi	r16, 0x01	; 1
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	f1 2c       	mov	r15, r1
		
		/*
			FIRST 2 FOR COLOR RED, SECOND 2 FOR COLOR YELLOW
		*/
		
		for(i=0;i<4;i++)
  f4:	e1 2c       	mov	r14, r1
		{
			int8_t dec = decoder[i];
  f6:	a7 2f       	mov	r26, r23
  f8:	bb 27       	eor	r27, r27
  fa:	a7 fd       	sbrc	r26, 7
  fc:	b0 95       	com	r27
  fe:	e1 e0       	ldi	r30, 0x01	; 1
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	ea 0f       	add	r30, r26
 108:	fb 1f       	adc	r31, r27
 10a:	60 81       	ld	r22, Z
			{
				int8_t col = dec_input[j];
				int8_t temp = dec || col;
				
				PORTD = temp;
				PORTA = upper_pattern[8*i+j];
 10c:	aa 0f       	add	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	aa 0f       	add	r26, r26
 112:	bb 1f       	adc	r27, r27
 114:	aa 0f       	add	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	fe 01       	movw	r30, r28
 11a:	35 96       	adiw	r30, 0x05	; 5
 11c:	c9 01       	movw	r24, r18
 11e:	8a 0f       	add	r24, r26
 120:	9b 1f       	adc	r25, r27
 122:	0f 2e       	mov	r0, r31
 124:	fd e2       	ldi	r31, 0x2D	; 45
 126:	cf 2e       	mov	r12, r31
 128:	d1 2c       	mov	r13, r1
 12a:	f0 2d       	mov	r31, r0
 12c:	cc 0e       	add	r12, r28
 12e:	dd 1e       	adc	r13, r29
 130:	ca 0e       	add	r12, r26
 132:	db 1e       	adc	r13, r27
		{
			int8_t dec = decoder[i];
			
			for(j=0;j<8;j++)
			{
				int8_t col = dec_input[j];
 134:	51 91       	ld	r21, Z+
				int8_t temp = dec || col;
 136:	61 11       	cpse	r22, r1
 138:	05 c0       	rjmp	.+10     	; 0x144 <main+0xc2>
 13a:	41 2f       	mov	r20, r17
 13c:	51 11       	cpse	r21, r1
 13e:	03 c0       	rjmp	.+6      	; 0x146 <main+0xc4>
 140:	4f 2d       	mov	r20, r15
 142:	01 c0       	rjmp	.+2      	; 0x146 <main+0xc4>
 144:	40 2f       	mov	r20, r16
				
				PORTD = temp;
 146:	42 bb       	out	0x12, r20	; 18
				PORTA = upper_pattern[8*i+j];
 148:	dc 01       	movw	r26, r24
 14a:	4d 91       	ld	r20, X+
 14c:	cd 01       	movw	r24, r26
 14e:	4b bb       	out	0x1b, r20	; 27
				PORTB = lower_pattern[8*i+j];
 150:	d6 01       	movw	r26, r12
 152:	4d 91       	ld	r20, X+
 154:	6d 01       	movw	r12, r26
 156:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	a9 ef       	ldi	r26, 0xF9	; 249
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	11 97       	sbiw	r26, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xda>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xe0>
 162:	00 00       	nop
		
		for(i=0;i<4;i++)
		{
			int8_t dec = decoder[i];
			
			for(j=0;j<8;j++)
 164:	e2 17       	cp	r30, r18
 166:	f3 07       	cpc	r31, r19
 168:	29 f7       	brne	.-54     	; 0x134 <main+0xb2>
		
		/*
			FIRST 2 FOR COLOR RED, SECOND 2 FOR COLOR YELLOW
		*/
		
		for(i=0;i<4;i++)
 16a:	7f 5f       	subi	r23, 0xFF	; 255
 16c:	74 30       	cpi	r23, 0x04	; 4
 16e:	1c f2       	brlt	.-122    	; 0xf6 <main+0x74>
 170:	7e 2d       	mov	r23, r14
 172:	c1 cf       	rjmp	.-126    	; 0xf6 <main+0x74>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
